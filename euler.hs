-- Super inefficient solutions to euler problems.

-- Problem 1
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.

euler_1 = sum [x | x <- [1..999], mod x 5 == 0 || mod x 3 == 0]


-- Problem 2
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

fib 0 = 0
fib 1 = 1
fib n = fib(n-1) + fib(n-2)
allFib = map fib [1..]
euler_2 = sum [x | x <- takeWhile (<= 4000000) allFib, even x]

-- Problem 3
-- The prime factors of 13195 are 5, 7, 13 and 29.
-- What is the largest prime factor of the number 600851475143 ?

factors n = [x | x <- [2 .. (div n 2)], rem n x == 0]
is_prime n =
	case factors n of
		[] -> True
		otherwise -> False
euler_3 =
	take 1 [x | x <- f, is_prime x]
	where f = (reverse (factors 600851475143))


-- Problem 4
-- A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.
-- Find the largest palindrome made from the product of two 3-digit numbers.
is_palindrome n =
	s == reverse s
	where s = show n
euler_4 = 
	maximum [a | x <- [100..999],
	             y <- [100..999],
	             let a = x * y,
	             is_palindrome a]

-- Problem 5
-- 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

-- What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
is_divisible n =
	case take 1 [x | x <- [1..20], mod n x /= 0] of
		[] -> True
		otherwise -> False
euler_5 = take 1 [x | x <- [20, 40 .. ], is_divisible x]





